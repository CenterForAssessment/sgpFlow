% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgpFlow.R
\name{sgpFlow}
\alias{sgpFlow}
\title{sgpFlow: Create sgpFlow trajectories}
\usage{
sgpFlow(
  sgp_object,
  state = NULL,
  sgpFlow.config,
  superCohort.config = NULL,
  cohort.data.type = "SINGLE_COHORT",
  trajectory.type = c("EXACT_VALUE", "NEAREST_INTEGER_VALUE"),
  csem.perturbation.of.initial.scores = TRUE,
  csem.perturbation.iterations = 100L,
  achievement.percentiles.tables = TRUE,
  export.duckdb = TRUE,
  export.Rdata = TRUE,
  projection.splineMatrices,
  parallel.config = list(WORKERS = parallel::detectCores() - 1)
)
}
\arguments{
\item{sgp_object}{An object of class \code{"SGP"} or \code{"data.table"}. If of class \code{"SGP"}, the `@Data` slot is used; otherwise, the supplied \code{data.table} is used directly.}

\item{state}{A character string indicating the state for which the analysis is conducted. This must match a state entry in \code{sgpFlowStateData}.}

\item{sgpFlow.config}{A configuration list for the sgpFlow analysis, containing details such as grade progression, year lags, and content area progression.}

\item{superCohort.config}{A configuration list specific to super-cohort analysis. If \code{NULL}, super-cohort analysis is skipped.}

\item{cohort.data.type}{A character vector specifying the type of cohort data to analyze. Options include \code{"SUPER_COHORT"}, \code{"COHORT"}, and \code{"ACHIEVEMENT_PERCENTILES"}. Default is \code{"COHORT"}.}

\item{trajectory.type}{A character vector specifying the type of trajectory "rounding" to perform when calculating growth trajectories. Options include \code{"EXACT_VALUE"}, \code{"NEAREST_INTEGER_VALUE"}, and \code{"NEAREST_OBSERVED_VALUE"}. Default is \code{"EXACT_VALUE"}.}

\item{csem.perturbation.of.initial.scores}{Logical. If \code{TRUE}, initial scores are perturbed using conditional standard error measurement (CSEM). Default is \code{TRUE}.}

\item{csem.perturbation.iterations}{Integer. Number of iterations for CSEM perturbation. Default is \code{100L}.}

\item{achievement.percentiles.tables}{Logical. Indicating whether subset based upon the achievement percentile is performed (99 resulting rows)}

\item{export.duckdb}{Logical. If `TRUE`, exports the aggregated results to a DuckDB database.}

\item{export.Rdata}{Logical. If `TRUE`, exports the sgpFlow results to an Rdata file.}

\item{projection.splineMatrices}{A list of projection spline matrices used for calculating growth trajectories.}

\item{parallel.config}{A list of configuration parameters for parallel processing. Default: `list(WORKERS=parallel::detectCores()-1)`.}
}
\value{
A list containing sgpFlow analysis results for each specified \code{cohort.data.type}.
}
\description{
The `sgpFlow` function facilitates the analysis of sgpFlow trajectories using various cohort data types,
such as traditional cohorts, super-cohorts, or achievement percentiles. It offers the flexibility to handle
conditional standard error measurement (CSEM) perturbation, growth projection matrices, and other configurations.
}
\details{
The `sgpFlow` function loops over specified \code{cohort.data.type} values, performing SGP trajectory analysis for each type. It supports super-cohort analysis when a valid \code{superCohort.config} is provided. If \code{csem.perturbation.of.initial.scores} is enabled, the function applies random perturbations to initial scores to account for measurement error, with the number of iterations controlled by \code{csem.perturbation.iterations}.

The function requires valid projection spline matrices (usually embedded in the sgpFlowMatrices package), provided through \code{projection.splineMatrices}, to perform growth trajectory calculations.
}
\examples{
\dontrun{
# Example usage with an SGP object
Demonstration_sgpFlow <- sgpFlow(
  sgp_object = sgpFlowData::sgpFlowData_LONG,
  sgpFlow.config = sgpFlow.config,
  superCohort.config = superCohort.config,
  cohort.data.type = c("COHORT", "SUPER_COHORT"),
  csem.perturbation.of.initial.scores = TRUE,
  csem.perturbation.iterations = 100L,
  projection.splineMatrices = sgpFlowMatrices::sgpFlowMatrices[["DEMO_sgpFlowMatrices"]][["2024_2025"]][["SUPER_COHORT"]]
)
}

}
