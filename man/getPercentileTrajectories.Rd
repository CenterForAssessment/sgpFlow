% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getPercentileTrajectories.R
\name{getPercentileTrajectories}
\alias{getPercentileTrajectories}
\title{Generate Percentile Trajectories}
\usage{
getPercentileTrajectories(
  wide_data,
  state,
  sgpFlow.config,
  projection.splineMatrices,
  growth.distribution = NULL,
  trajectory.type = "EXACT_VALUE",
  csem.perturbation.of.initial.scores = TRUE,
  csem.perturbation.iterations = 100L,
  iterate.without.csem.perturbation = FALSE,
  achievement.percentiles.tables = FALSE,
  csem.distribution = "Normal"
)
}
\arguments{
\item{wide_data}{A `data.table` in wide format containing student data, including scale scores and student IDs, for calculating percentile trajectories.}

\item{state}{A character string indicating the state for which the trajectories are computed. This is used for state-specific configurations in the `sgpFlow` package.}

\item{sgpFlow.config}{A list of configuration parameters required for the SGP analysis, including grade progressions, content areas, and other metadata.}

\item{projection.splineMatrices}{A list of projection spline matrices used for modeling growth percentiles over time.}

\item{growth.distribution}{A character vector specifying the growth distribution for projecting scores. Options include `"UNIFORM_RANDOM"`, `"BETA"`, or percentile values (`"1"` through `"99"`). Default: `NULL`.}

\item{trajectory.type}{A character vector specifying the type of trajectory "rounding" to perform when calculating growth trajectories. Options include \code{"EXACT_VALUE"}, \code{"NEAREST_INTEGER_VALUE"}, and \code{"NEAREST_OBSERVED_VALUE"}. Default is \code{"EXACT_VALUE"}.}

\item{csem.perturbation.of.initial.scores}{Logical. If `TRUE`, perturbs initial scale scores using CSEM to introduce variability in simulations. Default: `TRUE`.}

\item{csem.perturbation.iterations}{Integer. Number of iterations for perturbing scores and calculating trajectories. Default: `100`.}

\item{iterate.without.csem.perturbation}{Logical. If `TRUE`, performs CSEM iterations without perturbing score to derive 100 simulated trajectories from single (non-perturbed) initial score.}

\item{achievement.percentiles.tables}{Logical. If `TRUE`, creates growth trajectory tables based upon achievement percentiles tables intstead of all  `wide_data` supplied. Default: `FALSE`.}

\item{csem.distribution}{A character string specifying the distribution to use for CSEM perturbation. Options include `"Normal"`. Default: `"Normal"`.}
}
\value{
A list of `data.table` objects, where each element represents the results of one simulation iteration. Each `data.table` contains student IDs and their projected scale scores at different percentiles.
}
\description{
Computes percentile trajectories for student growth percentiles (SGPs) using projection matrices and optionally perturbs initial scores with conditional standard error of measurement (CSEM).

This function generates percentile trajectories over time for students based on provided data, state-specific configurations, and projection spline matrices. It supports iterative simulations with CSEM perturbation and custom growth distributions.
}
\details{
- The function allows for iterative simulation of percentile trajectories using CSEM perturbations.
- Growth distribution can be customized for each year or kept uniform across projections.
- Handles projection matrix sequences (`projection.splineMatrices`) to compute scale scores over time.
- Perturbation with CSEM requires state-specific meta-data in the `sgpFlowStateData` object.
- Internal checks ensure valid configurations for growth distribution and state meta-data.

**Steps:**
1. Generates a growth distribution projection sequence.
2. Optionally perturbs initial scores using CSEM.
3. Computes percentile trajectories using projection spline matrices for each iteration.
4. Binds and returns all iterations as a list of `data.table` objects.
}
\examples{
\dontrun{
if(interactive()){
  # Example usage
  trajectories <- getPercentileTrajectories(
    wide_data = student_data,
    state = "NY",
    sgpFlow.config = sgp_config_list,
    projection.splineMatrices = spline_matrices_list,
    growth.distribution = "UNIFORM_RANDOM",
    csem.perturbation.iterations = 50
  )
  
  # Access the first iteration results
  print(trajectories[[1]])
}
}
}
\seealso{
\code{\link[data.table]{copy}}, \code{\link[data.table]{setorder}}, \code{\link[data.table]{data.table}}, \code{\link[data.table]{rbindlist}}
 \code{\link[sgpFlow]{sgpFlowStateData}}
 \code{\link[stats]{runif}}
 \code{\link[collapse]{anyv}}, \code{\link[collapse]{fsubset}}, \code{\link[collapse]{collapv}}, \code{\link[collapse]{na_omit}}, \code{\link[collapse]{pivot}}, \code{\link[collapse]{qDT}}
 \code{\link[splines]{bs}}
}
